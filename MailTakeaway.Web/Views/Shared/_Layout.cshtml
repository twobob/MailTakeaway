<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Mail Takeaway</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        .list-group-item:hover {
            opacity: 0.9;
        }
        .navbar {
            box-shadow: 0 2px 4px rgba(0,0,0,.3);
        }
        [data-bs-theme="light"] body {
            background-color: #f8f9fa;
        }
        [data-bs-theme="dark"] body {
            background-color: #212529;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="@Url.Action("Index", "Home")">
                <i class="bi bi-envelope-fill"></i> Mail Takeaway
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Home")">
                            <i class="bi bi-list"></i> Browse Emails
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Statistics", "Home")">
                            <i class="bi bi-bar-chart"></i> Statistics
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <button class="btn btn-outline-light btn-sm me-2" onclick="toggleViewMode()" id="viewModeToggle">
                            <i class="bi bi-list-ul"></i> Individual View
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="btn btn-outline-light btn-sm me-2" onclick="toggleTheme()" id="themeToggle">
                            <i class="bi bi-sun-fill"></i> Light Mode
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="btn btn-outline-light btn-sm me-2" onclick="restartServer()">
                            <i class="bi bi-arrow-clockwise"></i> Restart Server
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="btn btn-outline-warning btn-sm me-2" onclick="stopServer()">
                            <i class="bi bi-stop-circle"></i> Stop Server
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="btn btn-outline-danger btn-sm" onclick="clearCache()">
                            <i class="bi bi-trash"></i> Clear Cache
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <main role="main">
        @RenderBody()
    </main>

    <footer class="footer mt-5 py-3 bg-light">
        <div class="container text-center text-muted">
            <small>&copy; 2025 Mail Takeaway - Email Archive Browser</small>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // View mode toggle
        function toggleViewMode() {
            const currentMode = localStorage.getItem('viewMode') || 'thread';
            const newMode = currentMode === 'thread' ? 'individual' : 'thread';
            localStorage.setItem('viewMode', newMode);
            
            // Update URL and reload
            const url = new URL(window.location);
            url.searchParams.set('threadView', newMode === 'thread' ? 'true' : 'false');
            window.location.href = url.toString();
        }

        function updateViewModeButton() {
            const btn = document.getElementById('viewModeToggle');
            if (!btn) return;
            
            const url = new URL(window.location);
            const threadView = url.searchParams.get('threadView') !== 'false';
            
            if (threadView) {
                btn.innerHTML = '<i class="bi bi-list-ul"></i> Individual View';
            } else {
                btn.innerHTML = '<i class="bi bi-chat-dots"></i> Thread View';
            }
        }

        // Theme toggle
        function toggleTheme() {
            const html = document.documentElement;
            const currentTheme = html.getAttribute('data-bs-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            html.setAttribute('data-bs-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeButton(newTheme);
        }

        function updateThemeButton(theme) {
            const btn = document.getElementById('themeToggle');
            if (theme === 'dark') {
                btn.innerHTML = '<i class="bi bi-sun-fill"></i> Light Mode';
            } else {
                btn.innerHTML = '<i class="bi bi-moon-fill"></i> Dark Mode';
            }
        }

        // Load saved theme on page load
        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            document.documentElement.setAttribute('data-bs-theme', savedTheme);
            updateThemeButton(savedTheme);
            updateViewModeButton();
            
            // Set threadView from localStorage if not in URL
            const url = new URL(window.location);
            if (!url.searchParams.has('threadView') && window.location.pathname === '/') {
                const savedViewMode = localStorage.getItem('viewMode') || 'thread';
                url.searchParams.set('threadView', savedViewMode === 'thread' ? 'true' : 'false');
                if (url.search) {
                    window.history.replaceState({}, '', url.toString());
                    updateViewModeButton();
                }
            }
        });

        function clearCache() {
            const currentPort = window.location.port || '9999';
            const targetUrl = 'http://localhost:' + currentPort;
            
            const btn = document.querySelector('[onclick="clearCache()"]');
            const originalText = btn.innerHTML;
            btn.disabled = true;
            btn.innerHTML = '<i class="bi bi-trash spinner-border spinner-border-sm"></i> Clearing & Restarting...';
            
            // Trigger clear cache and restart
            fetch('@Url.Action("ClearCache", "Home")', { method: 'POST' })
                .catch(() => {}); // Ignore errors as server is stopping
            
            // Try to reconnect every 2 seconds for 30 seconds (longer than regular restart)
            let attempts = 0;
            const maxAttempts = 15;
            const checkInterval = setInterval(async () => {
                attempts++;
                btn.innerHTML = `<i class="bi bi-trash spinner-border spinner-border-sm"></i> Re-indexing... (${attempts}/${maxAttempts})`;
                
                try {
                    const response = await fetch(targetUrl, { method: 'HEAD', cache: 'no-cache' });
                    if (response.ok) {
                        clearInterval(checkInterval);
                        btn.innerHTML = '<i class="bi bi-check-circle"></i> Done! Reloading...';
                        setTimeout(() => window.location.href = targetUrl, 500);
                    }
                } catch (err) {
                    // Server not ready yet
                }
                
                if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    btn.disabled = false;
                    btn.innerHTML = originalText;
                    alert('Server did not restart in time. Please refresh manually or check the server.');
                }
            }, 2000);
        }

        function stopServer() {
            const btn = document.querySelector('[onclick="stopServer()"]');
            const originalText = btn.innerHTML;
            btn.disabled = true;
            btn.innerHTML = '<i class="bi bi-stop-circle"></i> Stopping...';
            
            fetch('@Url.Action("Stop", "Home")', { method: 'POST' })
                .then(() => {
                    btn.innerHTML = '<i class="bi bi-check-circle"></i> Server Stopped';
                })
                .catch(() => {
                    btn.innerHTML = '<i class="bi bi-check-circle"></i> Server Stopped';
                });
        }

        function restartServer() {
            const currentPort = window.location.port || '9999';
            const targetUrl = 'http://localhost:' + currentPort;
            
            // Show visual feedback
            const btn = document.querySelector('[onclick="restartServer()"]');
            const originalText = btn.innerHTML;
            btn.disabled = true;
            btn.innerHTML = '<i class="bi bi-arrow-clockwise spinner-border spinner-border-sm"></i> Restarting...';
            
            // Trigger restart
            fetch('@Url.Action("Restart", "Home")', { method: 'POST' })
                .catch(() => {}); // Ignore errors as server is stopping
            
            // Try to reconnect every 2 seconds for 16 seconds
            let attempts = 0;
            const maxAttempts = 8;
            const checkInterval = setInterval(async () => {
                attempts++;
                btn.innerHTML = `<i class="bi bi-arrow-clockwise spinner-border spinner-border-sm"></i> Reconnecting... (${attempts}/${maxAttempts})`;
                
                try {
                    const response = await fetch(targetUrl, { method: 'HEAD', cache: 'no-cache' });
                    if (response.ok) {
                        clearInterval(checkInterval);
                        btn.innerHTML = '<i class="bi bi-check-circle"></i> Connected! Reloading...';
                        setTimeout(() => window.location.href = targetUrl, 500);
                    }
                } catch (err) {
                    // Server not ready yet
                }
                
                if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    btn.disabled = false;
                    btn.innerHTML = originalText;
                    alert('Server did not restart in time. Please refresh manually or check the server.');
                }
            }, 2000);
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
