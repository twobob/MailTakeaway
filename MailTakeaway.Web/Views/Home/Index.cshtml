@model MailTakeaway.Web.Models.EmailSearchViewModel
@{
    ViewData["Title"] = "Email Index Browser";
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col">
            @if (Model.Statistics != null)
            {
                <p class="text-muted">
                    Showing @Model.Emails.Count of @Model.TotalCount emails 
                    (@Model.Statistics.SuccessfullyParsed total indexed from @Model.Statistics.MboxFilesProcessed MBOX files)
                </p>
            }
        </div>
    </div>

    <!-- Search & Filter Panel -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="bi bi-search"></i> Search & Filters</h5>
        </div>
        <div class="card-body">
            <form method="get" asp-action="Index">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Search (Subject, From, To, Body)</label>
                        <input type="text" class="form-control" name="search" value="@Model.SearchTerm" placeholder="Search emails...">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">From</label>
                        <input type="text" class="form-control" name="from" value="@Model.FromFilter" placeholder="sender@example.com">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">To</label>
                        <input type="text" class="form-control" name="to" value="@Model.ToFilter" placeholder="recipient@example.com">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Folders</label>
                        <div class="dropdown w-100">
                            <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start" type="button" id="folderDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <span id="folderSelectionText">
                                    @if (Model.IncludeFolders.Any() || Model.ExcludeFolders.Any())
                                    {
                                        @($"Selected: {Model.IncludeFolders.Count} included, {Model.ExcludeFolders.Count} excluded")
                                    }
                                    else
                                    {
                                        <text>Select folders...</text>
                                    }
                                </span>
                            </button>
                            <div class="dropdown-menu p-3" aria-labelledby="folderDropdown" style="min-width: 400px; max-height: 400px; overflow-y: auto;" onclick="event.stopPropagation();">
                                <div class="mb-2">
                                    <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="selectAllFolders(true)">All ✓</button>
                                    <button type="button" class="btn btn-sm btn-outline-danger me-1" onclick="selectAllFolders(false)">All ✗</button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearAllFolders()">Clear</button>
                                </div>
                                @foreach (var folder in Model.AvailableFolders)
                                {
                                    var isIncluded = Model.IncludeFolders.Contains(folder);
                                    var isExcluded = Model.ExcludeFolders.Contains(folder);
                                    <div class="form-check d-flex align-items-center mb-1">
                                        <button type="button" 
                                                class="btn btn-sm me-2 folder-include-btn @(isIncluded ? "btn-success" : "btn-outline-success")" 
                                                data-folder="@folder"
                                                onclick="toggleFolderInclude('@folder')"
                                                style="width: 30px;">
                                            ✓
                                        </button>
                                        <button type="button" 
                                                class="btn btn-sm me-2 folder-exclude-btn @(isExcluded ? "btn-danger" : "btn-outline-danger")" 
                                                data-folder="@folder"
                                                onclick="toggleFolderExclude('@folder')"
                                                style="width: 30px;">
                                            ✗
                                        </button>
                                        <label class="form-check-label flex-grow-1">
                                            @folder
                                        </label>
                                    </div>
                                }
                                <input type="hidden" name="includeFolders" id="includeFolders" value="@string.Join(",", Model.IncludeFolders)">
                                <input type="hidden" name="excludeFolders" id="excludeFolders" value="@string.Join(",", Model.ExcludeFolders)">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Date From</label>
                        <input type="date" class="form-control" name="dateFrom" value="@Model.DateFrom?.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Date To</label>
                        <input type="date" class="form-control" name="dateTo" value="@Model.DateTo?.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Attachments</label>
                        <select class="form-select" name="hasAttachments">
                            <option value="">All</option>
                            <option value="true" selected="@(Model.HasAttachments == true)">With Attachments</option>
                            <option value="false" selected="@(Model.HasAttachments == false)">Without Attachments</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Attachment Type</label>
                        <select class="form-select" name="attachmentType">
                            <option value="">All Types</option>
                            @foreach (var ext in Model.AvailableAttachmentTypes)
                            {
                                var count = Model.AttachmentTypeCounts.TryGetValue(ext, out var c) ? c : 0;
                                <option value="@ext" selected="@(Model.AttachmentType == ext)">@ext (@count)</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Results Per Page</label>
                        <select class="form-select" name="pageSize">
                            <option value="20" selected="@(Model.PageSize == 20)">20</option>
                            <option value="50" selected="@(Model.PageSize == 50)">50</option>
                            <option value="100" selected="@(Model.PageSize == 100)">100</option>
                            <option value="500" selected="@(Model.PageSize == 500)">500</option>
                            <option value="5000" selected="@(Model.PageSize == 5000)">5000</option>
                            <option value="999999" selected="@(Model.PageSize >= 999999)">ALL</option>
                        </select>
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary me-2"><i class="bi bi-search"></i> Search</button>
                        <a href="@Url.Action("Index")" class="btn btn-secondary"><i class="bi bi-x-circle"></i> Clear</a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results -->
    @if (Model.Emails.Any())
    {
        @if (Model.ThreadView)
        {
            <div class="alert alert-info mb-3">
                <i class="bi bi-chat-dots"></i> Viewing in <strong>Thread Mode</strong> - showing conversation roots. Click any email to see the full thread.
            </div>
        }
        else
        {
            <div class="alert alert-info mb-3">
                <i class="bi bi-list-ul"></i> Viewing in <strong>Individual Mode</strong> - showing all messages separately.
            </div>
        }
        
        @foreach (var email in Model.Emails)
        {
            var threadUrl = Model.ThreadView ? Url.Action("Thread", new { id = email.MessageId }) : Url.Action("Details", new { id = email.MessageId });
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                        <h5 class="mb-1">
                            @if (email.HasAttachments)
                            {
                                <i class="bi bi-paperclip text-primary" title="@email.AttachmentCount attachment(s)"></i>
                            }
                            @if (!string.IsNullOrEmpty(email.InReplyTo))
                            {
                                <i class="bi bi-reply-fill text-info" title="Part of conversation"></i>
                            }
                            @email.Subject
                        </h5>
                        <div class="small">
                            <strong>From:</strong> @email.From<br>
                            <strong>To:</strong> @email.To<br>
                            <strong>Folder:</strong> <span class="badge bg-info">@email.Folder</span>
                        </div>
                    </div>
                    <div class="text-end ms-3">
                        <small class="text-muted">
                            @if (email.UtcDate.HasValue)
                            {
                                @email.UtcDate.Value.ToString("yyyy-MM-dd HH:mm")
                            }
                            else
                            {
                                <span>No date</span>
                            }
                            <br>
                            <span class="badge bg-secondary">@email.MboxSource</span>
                            <br>
                            <span class="text-muted">@((email.RawSize / 1024.0).ToString("N1")) KB</span>
                        </small>
                    </div>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(email.HtmlBody))
                    {
                        <div class="email-body-html">
                            @Html.Raw(email.HtmlBody)
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(email.TextBody))
                    {
                        <pre class="email-body-text" style="white-space: pre-wrap; font-family: inherit; margin: 0;">@email.TextBody</pre>
                    }
                    else
                    {
                        <p class="text-muted mb-0">@email.BodyPreview</p>
                    }
                    
                    @if (email.HasAttachments && email.AttachmentData != null)
                    {
                        <div class="mt-3 pt-3 border-top">
                            <h6><i class="bi bi-paperclip"></i> Attachments (@email.AttachmentCount)</h6>
                            <div class="row g-2">
                                @foreach (var attachment in email.AttachmentData)
                                {
                                    var fileName = attachment.Key;
                                    var attachmentData = attachment.Value;
                                    var ext = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
                                    var isImage = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" }.Contains(ext);
                                    
                                    <div class="col-md-6 col-lg-3">
                                        <div class="card h-100">
                                            @if (isImage)
                                            {
                                                <img src="data:@attachmentData.ContentType;base64,@Convert.ToBase64String(attachmentData.Data)" 
                                                     class="card-img-top" 
                                                     alt="@fileName"
                                                     style="max-height: 200px; object-fit: contain; padding: 5px;">
                                            }
                                            <div class="card-body p-2">
                                                <h6 class="card-title small text-truncate mb-1" title="@fileName">@fileName</h6>
                                                <p class="card-text small text-muted mb-1">@((attachmentData.Data.Length / 1024.0).ToString("N1")) KB</p>
                                                <a href="@Url.Action("Attachment", new { messageId = email.MessageId, fileName = fileName })" 
                                                   class="btn btn-sm btn-primary" 
                                                   target="_blank">
                                                    <i class="bi bi-download"></i> Download
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <a href="@threadUrl" class="btn btn-sm btn-primary">
                        @if (Model.ThreadView)
                        {
                            <i class="bi bi-chat-dots"></i> <text>View Thread</text>
                        }
                        else
                        {
                            <i class="bi bi-envelope-open"></i> <text>View Details</text>
                        }
                    </a>
                </div>
            </div>
        }

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Email pagination" class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { 
                            search = Model.SearchTerm, 
                            from = Model.FromFilter, 
                            to = Model.ToFilter,
                            includeFolders = string.Join(",", Model.IncludeFolders),
                            excludeFolders = string.Join(",", Model.ExcludeFolders),
                            dateFrom = Model.DateFrom?.ToString("yyyy-MM-dd"),
                            dateTo = Model.DateTo?.ToString("yyyy-MM-dd"),
                            hasAttachments = Model.HasAttachments,
                            attachmentType = Model.AttachmentType,
                            pageSize = Model.PageSize,
                            threadView = Model.ThreadView,
                            page = Model.CurrentPage - 1 
                        })">Previous</a>
                    </li>

                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { 
                                search = Model.SearchTerm, 
                                from = Model.FromFilter, 
                                to = Model.ToFilter,
                                includeFolders = string.Join(",", Model.IncludeFolders),
                                excludeFolders = string.Join(",", Model.ExcludeFolders),
                                dateFrom = Model.DateFrom?.ToString("yyyy-MM-dd"),
                                dateTo = Model.DateTo?.ToString("yyyy-MM-dd"),
                                hasAttachments = Model.HasAttachments,
                                attachmentType = Model.AttachmentType,
                                pageSize = Model.PageSize,
                                threadView = Model.ThreadView,
                                page = i 
                            })">@i</a>
                        </li>
                    }

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { 
                            search = Model.SearchTerm, 
                            from = Model.FromFilter, 
                            to = Model.ToFilter,
                            includeFolders = string.Join(",", Model.IncludeFolders),
                            excludeFolders = string.Join(",", Model.ExcludeFolders),
                            dateFrom = Model.DateFrom?.ToString("yyyy-MM-dd"),
                            dateTo = Model.DateTo?.ToString("yyyy-MM-dd"),
                            hasAttachments = Model.HasAttachments,
                            attachmentType = Model.AttachmentType,
                            pageSize = Model.PageSize,
                            threadView = Model.ThreadView,
                            page = Model.CurrentPage + 1 
                        })">Next</a>
                    </li>
                </ul>
            </nav>
        }
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No emails found matching your criteria.
        </div>
    }
</div>

<script>
    let includedFolders = new Set(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.IncludeFolders)));
    let excludedFolders = new Set(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ExcludeFolders)));

    function toggleFolderInclude(folder) {
        if (includedFolders.has(folder)) {
            includedFolders.delete(folder);
        } else {
            includedFolders.add(folder);
            excludedFolders.delete(folder);
        }
        updateFolderInputs();
        updateFolderButtons();
    }

    function toggleFolderExclude(folder) {
        if (excludedFolders.has(folder)) {
            excludedFolders.delete(folder);
        } else {
            excludedFolders.add(folder);
            includedFolders.delete(folder);
        }
        updateFolderInputs();
        updateFolderButtons();
    }

    function selectAllFolders(include) {
        const allFolders = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AvailableFolders));
        if (include) {
            includedFolders = new Set(allFolders);
            excludedFolders.clear();
        } else {
            excludedFolders = new Set(allFolders);
            includedFolders.clear();
        }
        updateFolderInputs();
        updateFolderButtons();
    }

    function clearAllFolders() {
        includedFolders.clear();
        excludedFolders.clear();
        updateFolderInputs();
        updateFolderButtons();
    }

    function updateFolderInputs() {
        document.getElementById('includeFolders').value = Array.from(includedFolders).join(',');
        document.getElementById('excludeFolders').value = Array.from(excludedFolders).join(',');
        
        const text = (includedFolders.size > 0 || excludedFolders.size > 0)
            ? `Selected: ${includedFolders.size} included, ${excludedFolders.size} excluded`
            : 'Select folders...';
        document.getElementById('folderSelectionText').textContent = text;
    }

    function updateFolderButtons() {
        document.querySelectorAll('.folder-include-btn').forEach(btn => {
            const folder = btn.dataset.folder;
            if (includedFolders.has(folder)) {
                btn.classList.remove('btn-outline-success');
                btn.classList.add('btn-success');
            } else {
                btn.classList.remove('btn-success');
                btn.classList.add('btn-outline-success');
            }
        });

        document.querySelectorAll('.folder-exclude-btn').forEach(btn => {
            const folder = btn.dataset.folder;
            if (excludedFolders.has(folder)) {
                btn.classList.remove('btn-outline-danger');
                btn.classList.add('btn-danger');
            } else {
                btn.classList.remove('btn-danger');
                btn.classList.add('btn-outline-danger');
            }
        });
    }

    // Initialize button states on page load
    updateFolderButtons();
</script>

<style>
    .email-body-html {
        max-width: 100%;
        overflow-x: auto;
    }
    .email-body-html img {
        max-width: 100%;
        height: auto;
    }
    .email-body-html table {
        max-width: 100%;
    }
</style>
